// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Jurik Moving Average (JMA)", "JMA", overlay=true)

//@function Calculates JMA using adaptive techniques to adjust to market volatility
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/trends_IIR/jma.md
//@param source Series to calculate JMA from
//@param period Number of bars used in the calculation
//@param phase Phase shift (-100 to 100). Negative values reduce lag but may cause overshoot
//@param power Smoothing factor (0.1-1.0). Lower values create smoother curves
//@returns JMA value with adaptive smoothing and reduced lag
//@optimized Uses adaptive volatility adjustment and phase control for O(1) complexity per bar
jma(series float source, simple int period, simple int phase=0, simple float power=0.45) =>
    simple float PHASE_VALUE = math.min(math.max((phase * 0.01) + 1.5, 0.5), 2.5)
    simple float BETA = power * (period - 1) / ((power * (period - 1)) + 2)
    simple float LEN1 = math.max((math.log(math.sqrt(0.5 * (period - 1))) / math.log(2.0)) + 2.0, 0)
    simple float POW1 = math.max(LEN1 - 2.0, 0.5)
    simple float LEN2 = math.sqrt(0.5 * (period - 1)) * LEN1
    simple float POW1_RECIPROCAL = 1.0 / POW1
    simple float AVG_VOLTY_ALPHA = 2.0 / (math.max(4.0 * period, 65) + 1.0)
    simple float DIV = 1.0 / (10.0 + 10.0 * (math.min(math.max(period - 10, 0), 100)) / 100.0)
    var float upperBand_state = na
    var float lowerBand_state = na
    var float ma1_state = na
    var float jma_state = na
    var float vSum_state = 0.0
    var float det0_state = 0.0
    var float det1_state = 0.0
    var float avgVolty_state = na
    var array<float> volty_array_state = array.new_float(11, 0.0)
    float current_jma = na
    if not na(source)
        float del1 = source - nz(upperBand_state, source)
        float del2 = source - nz(lowerBand_state, source)
        float volty = math.abs(del1) == math.abs(del2) ? 0.0 : math.max(math.abs(del1), math.abs(del2))
        array.unshift(volty_array_state, nz(volty, 0.0))
        array.pop(volty_array_state)
        if not na(volty)
            vSum_state := vSum_state + (volty - array.get(volty_array_state, 10)) * DIV
            avgVolty_state := nz(avgVolty_state, vSum_state) + AVG_VOLTY_ALPHA * (vSum_state - nz(avgVolty_state, vSum_state))
        float rvolty = math.min(math.max(nz(avgVolty_state, 0) > 0 ? nz(volty, 0.0) / nz(avgVolty_state, 1.0) : 1.0, 1.0), math.pow(LEN1, POW1_RECIPROCAL))
        float pow2 = math.pow(rvolty, POW1)
        float Kv = math.pow(LEN2 / (LEN2 + 1), math.sqrt(pow2))
        upperBand_state := del1 > 0 ? source : source - Kv * del1
        lowerBand_state := del2 < 0 ? source : source - Kv * del2
        float alpha = math.pow(BETA, pow2)
        float alphaSquared = alpha * alpha
        float oneMinusAlpha = 1.0 - alpha
        float oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha
        ma1_state := source + (alpha * (nz(ma1_state, source) - source))
        det0_state := (source - ma1_state) * (1 - BETA) + BETA * nz(det0_state, 0)
        float ma2 = ma1_state + (PHASE_VALUE * det0_state)
        det1_state := ((ma2 - nz(jma_state, source)) * oneMinusAlphaSquared) + (alphaSquared * nz(det1_state, 0))
        jma_state := nz(jma_state, source) + det1_state
        current_jma := jma_state
    current_jma

// ---------- Main loop ----------

// Inputs
i_period = input.int(10, "Period", minval=1, tooltip="Number of bars used in the calculation")
i_phase = input.int(0, "Phase", tooltip="Phase shift (-100 to 100). Negative values reduce lag but may cause overshoot", minval=-100, maxval=100, step=10)
i_power = input.float(0.45, "Power", tooltip="Smoothing factor (0.1-1.0). Lower values create smoother curves", minval=0.1, maxval=1.0, step=0.01)
i_source = input.source(close, "Source")

// Calculation
jma_value = jma(i_source, i_period, i_phase, i_power)

// Plot
plot(jma_value, "JMA", color=color.yellow, linewidth=2)
