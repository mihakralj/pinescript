// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Fractal Adaptive Moving Average", "FRAMA", overlay=true)

//@function Calculates FRAMA using fractal dimension to determine the optimal alpha
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/trends_IIR/frama.md
//@param source Series to calculate FRAMA from
//@param period Number of bars used in the calculation
//@returns FRAMA value with fractal-based adaptive smoothing
//@optimized for performance and dirty data
frama(series float src, simple int period) =>
    p = math.max(2, period)
    p_adj = p % 2 == 0 ? p : p + 1
    i_p_adj = int(p_adj)
    i_h_p = int(p_adj / 2)
    float n1 = na
    float n2 = na
    float n3 = na
    bool data_available = bar_index >= i_p_adj - 1 and not na(src[i_p_adj - 1])
    if data_available
        float hh1 = ta.highest(src, i_h_p)
        float ll1 = ta.lowest(src, i_h_p)
        float hh2_calc = src[i_h_p]
        float ll2_calc = src[i_h_p]
        bool second_half_na = na(hh2_calc)
        if not second_half_na
            for i = i_h_p + 1 to i_p_adj - 1
                float val = src[i]
                if not na(val)
                    hh2_calc := math.max(hh2_calc, val)
                    ll2_calc := math.min(ll2_calc, val)
                else
                    second_half_na := true
                    break
        float hh3 = ta.highest(src, i_p_adj)
        float ll3 = ta.lowest(src, i_p_adj)
        if not na(hh1) and not na(ll1) and i_h_p > 0
            n1 := (hh1 - ll1) / i_h_p
        if not second_half_na and i_h_p > 0
            n2 := (hh2_calc - ll2_calc) / i_h_p
        if not na(hh3) and not na(ll3) and i_p_adj > 0
            n3 := (hh3 - ll3) / i_p_adj
    var float result = na
    float alpha = 1.0
    if n1 > 0 and n2 > 0 and n3 > 0
        float dimen = (math.log(n1 + n2) - math.log(n3)) / math.log(2.0)
        alpha := math.exp(-4.6 * (dimen - 1.0))
        alpha := math.max(0.01, math.min(1.0, alpha))
    if not na(src)
        float prev_f = nz(result[1], src)
        result := alpha * src + (1.0 - alpha) * prev_f
    else
        result := na
    data_available ? result : na


// ---------- Main loop ----------

// Inputs
i_period = input.int(16, "Period", minval=2)
i_source = input.source(close, "Source")

// Calculation
frama_value = frama(i_source, i_period)

// Plot
plot(frama_value, "FRAMA", color.new(color.yellow, 0), 2)
