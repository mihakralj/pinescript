// The MIT License (MIT)
// © mihakralj
//@version=6
indicator("Endpoint Moving Average", "EPMA", overlay=true)

//@function Calculates EPMA using exponential smoothing with endpoint emphasis
//@doc https://github.com/mihakralj/pinescript/blob/main/docs/trends/epma.md
//@param source Series to calculate EPMA from
//@param period Lookback period
//@param endpoint_weight Weight factor for endpoint emphasis (≥1.0)
//@returns EPMA value from first bar with proper compensation
epma(series float source, simple int period, simple float endpoint_weight) =>
    if period < 1
        runtime.error("Period must be greater than 0")
    if endpoint_weight < 1.0
        runtime.error("Endpoint weight must be greater than or equal to 1.0")

    var float EPSILON = 1e-10        // constant - smallest relevant value
    var float raw_epma = 0.0
    var float e = 1.0

    // Calculate alpha with endpoint weighting
    float alpha = (2.0 * endpoint_weight) / (float(period) + endpoint_weight)

    // Calculate endpoint-weighted moving average
    float endpoint_factor = endpoint_weight * alpha
    float history_factor = 1.0 - endpoint_factor

    raw_epma := endpoint_factor * source + history_factor * raw_epma
    e := history_factor * e

    // Apply dynamic compensation for initialization bias
    e > EPSILON ? raw_epma / (1.0 - e) : raw_epma

// Inputs with default values optimized for typical usage
i_period = input.int(20, "Period", minval=1)
i_source = input.source(close, "Source")
i_endpoint_weight = input.float(1.5, "Endpoint Weight", minval=1.0, maxval=3.0, step=0.1)

// Calculate EPMA using the enhanced method
epma = epma(i_source, i_period, i_endpoint_weight)

// Plot
plot(epma, "EPMA", color.new(color.yellow, 0), 2)

// Alert
alertcondition(ta.cross(i_source, epma), "Price Crosses EPMA", "Price crossed EPMA on {{ticker}}")
