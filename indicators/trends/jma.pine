// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Jurik Moving Average", "JMA", overlay=true)

//@function Calculates JMA using adaptive techniques to adjust to market volatility
//@doc https://github.com/mihakralj/pinescript/blob/main/docs/trends/jma.md
//@param source Series to calculate JMA from
//@param period Number of bars used in the calculation
//@param phase Phase shift (-100 to 100). Negative values reduce lag but may cause overshoot
//@param power Smoothing factor (0.1-1.0). Lower values create smoother curves
//@returns JMA value with adaptive smoothing and reduced lag
jma(series float source, simple int period, simple int phase = 0, simple float power = 0.45) =>
    var simple float PHASE_VALUE = math.min(math.max((phase * 0.01) + 1.5, 0.5), 2.5)
    var simple float BETA = power * (period - 1) / ((power * (period - 1)) + 2)
    var simple float LEN1 = math.max((math.log(math.sqrt(0.5*(period-1))) / math.log(2.0)) + 2.0, 0)
    var simple float POW1 = math.max(LEN1 - 2.0, 0.5)
    var simple float LEN2 = math.sqrt(0.5*(period-1))*LEN1
    var simple float POW1_RECIPROCAL = 1.0 / POW1
    var simple float AVG_VOLTY_ALPHA = 2.0 / (math.max(4.0 * period, 65) + 1.0)
    var simple float DIV = 1.0/(10.0 + 10.0*(math.min(math.max(period-10,0),100))/100.0)
    var float upperBand = source
    var float lowerBand = source
    var float ma1 = source
    var float jma = source
    var float vSum = 0.0
    var float det0 = 0.0
    var float det1 = 0.0
    var float avgVolty = 0.0
    var volty_array = array.new_float(11, 0.0)
    float del1 = source - upperBand
    float del2 = source - lowerBand
    float volty = math.abs(del1) == math.abs(del2) ? 0.0 : math.max(math.abs(del1), math.abs(del2))
    array.unshift(volty_array, volty)
    array.pop(volty_array)
    vSum := vSum + (volty - array.get(volty_array, 10)) * DIV
    avgVolty := na(avgVolty) ? vSum : avgVolty + AVG_VOLTY_ALPHA * (vSum - avgVolty)
    float rvolty = math.min(math.max(avgVolty > 0 ? volty / avgVolty : 1.0, 1.0), math.pow(LEN1, POW1_RECIPROCAL))
    float pow2 = math.pow(rvolty, POW1)
    float Kv = math.pow(LEN2/(LEN2+1), math.sqrt(pow2))
    upperBand := del1 > 0 ? source : source - Kv * del1
    lowerBand := del2 < 0 ? source : source - Kv * del2
    float alpha = math.pow(BETA, pow2)
    float alphaSquared = alpha * alpha
    float oneMinusAlpha = 1.0 - alpha
    float oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha
    ma1 := source + (alpha * (ma1 - source))
    det0 := (source - ma1) * (1 - BETA) + BETA * det0
    float ma2 = ma1 + (PHASE_VALUE * det0)
    det1 := ((ma2 - nz(jma, source)) * oneMinusAlphaSquared) + (alphaSquared * nz(det1, 0))
    jma := nz(jma, source) + det1
    jma


// ---------- Main loop ----------

// Inputs
i_period = input.int(14, "Period", minval=1, tooltip="Number of bars used in the calculation")
i_phase = input.int(0, "Phase", tooltip="Phase shift (-100 to 100). Negative values reduce lag but may cause overshoot", minval=-100, maxval=100, step=10)
i_power = input.float(0.45, "Power", tooltip="Smoothing factor (0.1-1.0). Lower values create smoother curves", minval=0.1, maxval=1.0, step=0.01)
i_source = input.source(close, "Source")

// Calculation
jma_value = jma(i_source, i_period, i_phase, i_power)

// Plot
plot(jma_value, "JMA", color.new(color.yellow, 0), 2)

// Alert
alertcondition(ta.cross(i_source, jma_value), "Price Crosses JMA", "Price crossed JMA on {{ticker}}")
