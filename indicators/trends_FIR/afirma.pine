// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Autoregressive Finite Impulse Response Moving Average (AFIRMA)", "AFIRMA", overlay=true)

//@function Calculates AFIRMA using various windowing functions
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/trends_FIR/afirma.md
//@param source Series to calculate AFIRMA from
//@param period Lookback period - window size
//@param windowType Window function type (1:Hanning, 2:Hamming, 3:Blackman, 4:Blackman-Harris)
//@returns AFIRMA value, calculates from first bar using available data
//@optimized for performance and dirty data
afirma(series float src, simple int period, simple int windowType = 4) =>
    float result = src
    if period <= 0
        runtime.error("Period must be greater than 0")
    if windowType < 1 or windowType > 4
        runtime.error("WindowType should be in range [1-4]")
    int p = math.min(bar_index + 1, period)
    if p > 1
        var float[] coefs = array.new_float(1, 0.0)
        var int prevPeriod = 0
        var int prevWindowType = -1
        if p != prevPeriod or windowType != prevWindowType
            coefs := array.new_float(p, 0.0)
            float a0 = 0.35875, float a1 = -0.48829, float a2 = 0.14128, float a3 = -0.01168 // Blackman-Harris
            if windowType == 1  // Hanning
                a0 := 0.50, a1 := -0.50
            else if windowType == 2  // Hamming
                a0 := 0.54, a1 := -0.46
            else if windowType == 3  // Blackman
                a0 := 0.42, a1 := -0.50, a2 := 0.08
            float TWO_PI = 6.28318530718
            float twoPiDivP = TWO_PI / p
            for k = 0 to p - 1
                float kTwoPiDivP = k * twoPiDivP
                float coef = a0 + a1 * math.cos(kTwoPiDivP)
                if a2 != 0.0
                    coef += a2 * math.cos(2.0 * kTwoPiDivP)
                if a3 != 0.0
                    coef += a3 * math.cos(3.0 * kTwoPiDivP)
                array.set(coefs, k, coef)
            prevPeriod := p
            prevWindowType := windowType
        float sum = 0.0, float weightSum = 0.0, int validCount = 0
        for i = 0 to p - 1
            float price = src[i]
            if not na(price)
                float coef = array.get(coefs, i)
                sum += price * coef
                weightSum += coef
                validCount += 1
        result := validCount > 0 and weightSum > 0 ? sum / weightSum : src
    result
        
// ---------- Main loop ----------

// Inputs
i_period = input.int(20, "Period", minval=1)
i_source = input.source(close, "Source")
i_windowType = input.int(4, "Window Function", minval=1, maxval=4, tooltip="1:Hanning, 2:Hamming, 3:Blackman, 4:Blackman-Harris")

// Calculation
float afirma_value = afirma(i_source, i_period, i_windowType)

// Plot
plot(afirma_value, "AFIRMA", color.new(color.yellow, 0), 2)
