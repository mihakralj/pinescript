// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("LOESS Smoothing", "LOESS", overlay=true, timeframe="", timeframe_gaps=true)

//@function Calculates LOESS (Locally Weighted Scatterplot Smoothing) using local linear regression.
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/filters/loess.md
//@param src Input series.
//@param length The number of data points used for each local regression (window size). Larger values produce smoother results but increase lag and computation. Must be odd >= 3.
//@returns LOESS smoothed series.
//@optimized for performance and dirty data (within Pine Script limitations for LOESS)
loess(series float src, simple int length) =>
    if length < 3 or length % 2 == 0
        runtime.error("Length must be an odd integer >= 3.")
    
    var float smoothed_val = na // Use 'var' for state persistence across bars
    int half_len = length / 2 

    // --- Full LOESS Calculation (only when enough bars exist) ---
    float[] weights = array.new_float(length, 0.0)
    for i = 0 to length - 1
        float u = math.abs(i - half_len) / float(half_len + 1) 
        float tricube_weight = 0.0
        if u < 1.0
            float u_cubed = u * u * u
            float factor = 1.0 - u_cubed
            tricube_weight := factor * factor * factor
        array.set(weights, i, tricube_weight)
    float sumW = 0.0, float sumWX = 0.0, float sumWY = 0.0, float sumWXY = 0.0, float sumWX2 = 0.0
    for i = 0 to length - 1
        float w = array.get(weights, i)
        float x = float(i - half_len) // Index relative to center
        float y = nz(src[length - 1 - i], src[length - i]) // Data from window
        sumW += w, sumWX += w * x, sumWY += w * y, sumWXY += w * x * y, sumWX2 += w * x * x
    float b = 0.0, float a = 0.0
    float denominator = sumW * sumWX2 - sumWX * sumWX
    if math.abs(denominator) > 1e-9 
        b := (sumW * sumWXY - sumWX * sumWY) / denominator
        a := (sumWY - b * sumWX) / sumW
    else if math.abs(sumW) > 1e-9 
        a := sumWY / sumW
    else 
        a := nz(src, 0.0)
    smoothed_val := a 


// ---------- Main loop ----------

// Inputs
i_source = input.source(close, "Source")
i_length = input.int(7, "Length (Window Size)", minval=3, step=2) // Must be odd

// Calculation
loess_val = loess(i_source, i_length)

// Plot
plot(loess_val, "LOESS", color.new(color.yellow, 0), 2)
