// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("LOESS Filter", "LOESS", overlay=true, timeframe="", timeframe_gaps=true)

//@function Applies LOESS (LOcally Estimated Scatterplot Smoothing) filter
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/filters/loess.md
//@param src Input series to filter
//@param length Window size (rounded down to nearest odd number)
//@returns LOESS smoothed series
loess(series float src, simple int length) =>
    int adj_length = math.max(3, length % 2 == 0 ? length - 1 : length)
    var array<float> weights = array.new_float(0)
    array.clear(weights)
    int half_window = int(adj_length / 2)
    float sum = 0.0
    float weight_sum = 0.0
    for i = -half_window to half_window
        float x = math.abs(float(i)) / float(half_window)
        float w = math.pow(1 - math.pow(x, 3), 3)
        array.push(weights, w)
    float x_sum = 0.0,  float xy_sum = 0.0, float x2_sum = 0.0, float w_sum = 0.0
    for i = 0 to adj_length - 1
        float price = src[i]
        if not na(price)
            float w = array.get(weights, i)
            float x = float(i - half_window)
            x_sum += x * w
            xy_sum += x * price * w
            x2_sum += x * x * w
            w_sum += w
            sum += price * w
            weight_sum += w
    if weight_sum == 0.0
        src
    else
        float x_mean = x_sum / weight_sum
        float y_mean = sum / weight_sum
        float slope = (xy_sum - x_mean * sum) / (x2_sum - x_mean * x_sum)
        float intercept = (y_mean * x2_sum - x_mean * xy_sum) / (x2_sum - x_mean * x_sum)
        intercept

// ---------- Main loop ----------

// Inputs
i_length = input.int(7, "Length", minval=3)
i_source = input.source(close, "Source")

// Calculation
loess_val = loess(i_source, i_length)

// Plot
plot(loess_val, "LOESS", color=color.new(color.yellow, 0, color=color.yellow, linewidth=2), linewidth=2)
