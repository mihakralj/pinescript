// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Ehlers Highpass Filter", "EHHPF", overlay=false)

//@function Calculates Ehlers Highpass Filter
//@param source Series to calculate EHHP from
//@param length Number of bars used in the calculation
//@returns EHHP value with optimized filtering
ehbpf(series float src, simple int lp, simple int up) =>
    var float SQRT2_PI = math.sqrt(2) * math.pi
    var float hp = na
    var float hp_c1 = 0.0, var float hp_c2 = 0.0, var float hp_c3 = 0.0
    var int prev_hp_length = 0
    var float bpf = na
    var float lp_c1 = 0.0, var float lp_c2 = 0.0, var float lp_c3 = 0.0
    var int prev_lp_length = 0
    if prev_hp_length != lp
        hp_arg = SQRT2_PI / float(lp)
        hp_exp_arg = math.exp(-hp_arg)
        hp_c2 := 2 * hp_exp_arg * math.cos(hp_arg)
        hp_c3 := -hp_exp_arg * hp_exp_arg
        hp_c1 := (1 + hp_c2 - hp_c3) / 4
        prev_hp_length := lp
    if prev_lp_length != up
        lp_arg = SQRT2_PI / float(up)
        lp_exp_arg = math.exp(-lp_arg)
        lp_c2 := 2 * lp_exp_arg * math.cos(lp_arg)
        lp_c3 := -lp_exp_arg * lp_exp_arg
        lp_c1 := 1 - lp_c2 - lp_c3  // Different formula for supersmoother
        prev_lp_length := up
    float ssrc = nz(src, src[1])
    float src1 = nz(src[1], ssrc)
    float src2 = nz(src[2], src1)
    float hp1 = nz(hp[1], 0.0)
    float hp2 = nz(hp[2], 0.0)
    hp := hp_c1 * (ssrc - 2 * src1 + src2) + hp_c2 * hp1 + hp_c3 * hp2
    float bp1 = nz(bpf[1], hp)
    float bp2 = nz(bpf[2], bp1)
    bpf := lp_c1 * hp + lp_c2 * bp1 + lp_c3 * bp2
    bpf

// ---------- Main loop ----------

// Inputs
i_length = input.int(20, "Length", minval=1)
i_source = input.source(close, "Source")

// Calculation
ehhpf = ehhp(i_source, i_length)

// Plot
plot(ehhp_value, "EHHighpass", color.new(color.red, 0), 2)
