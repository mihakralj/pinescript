// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Ehlers 2-Pole Highpass Filter(EHHPF)", "EHHPF", overlay=false, timeframe="", timeframe_gaps=true)

//@function Calculates Ehlers 2-Pole Highpass Filter
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/filters/ehhpf.md
//@param src Series to calculate EHHPF from
//@param length Cutoff period (determines alpha)
//@returns EHHPF value
ehhpf(series float src, simple int length) =>
    // Ensure length is valid
    int safe_length = math.max(length, 1)
    float pi = math.pi
    float omega = 2.0 * pi / safe_length
    float alpha = (math.cos(omega) + math.sin(omega) - 1.0) / math.cos(omega)
    var float hp = 0.0
    float hp1 = nz(hp[1], 0.0)
    float hp2 = nz(hp[2], 0.0)
    float ssrc = nz(src, src[1])
    float src1 = nz(src[1], ssrc)
    float src2 = nz(src[2], src1)
    float alpha_div_2 = alpha / 2.0
    float one_minus_alpha = 1.0 - alpha
    hp := (1.0 - alpha_div_2) * (1.0 - alpha_div_2) * (ssrc - 2 * src1 + src2) + 2.0 * one_minus_alpha * hp1 - one_minus_alpha * one_minus_alpha * hp2
    hp

// ---------- Main loop ----------

// Inputs
i_length = input.int(40, "Length", minval=1) // Ehlers often uses 40 or 48 for HP
i_source = input.source(close, "Source")

// Calculation
hp_val = ehhpf(i_source, i_length)

// Plot
plot(hp_val, "EHBandpass", color.new(color.yellow, 0), 2)
