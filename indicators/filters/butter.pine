// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Butterworth Filter (2nd Order)", "Butter", overlay=true, timeframe="", timeframe_gaps=true)

//@function Calculates 2nd Order Butterworth Lowpass Filter
//@param src Series to calculate Butterworth filter from
//@param length Cutoff period (related to -3dB frequency)
//@returns Butterworth filter value
butter(series float src, simple int length) =>
    float pi = math.pi
    int safe_length = math.max(length, 2)
    float omega = 2.0 * pi / safe_length
    float sin_omega = math.sin(omega)
    float cos_omega = math.cos(omega)
    float alpha = sin_omega / math.sqrt(2.0)
    float a0 = 1.0 + alpha
    float a1 = -2.0 * cos_omega
    float a2 = 1.0 - alpha
    float b0 = (1.0 - cos_omega) / 2.0
    float b1 = 1.0 - cos_omega
    float b2 = (1.0 - cos_omega) / 2.0
    var float filt = na
    if bar_index < 2
        filt := nz(src, 0.0)
    else
        float ssrc = nz(src, src[1])
        float src1 = nz(src[1], ssrc)
        float src2 = nz(src[2], src1)
        float filt1 = nz(filt[1], ssrc)
        float filt2 = nz(filt[2], filt1)
        filt := (b0 * ssrc + b1 * src1 + b2 * src2 - a1 * filt1 - a2 * filt2) / a0
    filt

// ---------- Main loop ----------

// Inputs
i_length = input.int(20, "Length", minval=2)
i_source = input.source(close, "Source")

// Calculation
butter_val = butter(i_source, i_length)

// Plot
plot(butter_val, "Butterworth", color=color.new(color.yellow, 0), linewidth=2)
