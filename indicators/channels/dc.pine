// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Donchian Channels (DC)", "DC", overlay=true)

/// Calculates the Donchian Channel (DC) efficiently using monotonic deques.
/// @doc https://github.com/mihakralj/pinescript/blob/main/indicators/channels/dc.md
/// The Donchian Channel consists of an upper band (highest high over the period),
/// a lower band (lowest low over the period), and a basis line (average of upper and lower).
/// @function dc
/// @param hi {series float} Source series for the highest high calculation (usually `high`).
/// @param lo {series float} Source series for the lowest low calculation (usually `low`).
/// @param p {simple int} Lookback period. `p` > 0.
/// @returns {[series float, series float, series float]} A tuple containing the basis, upper band, and lower band.
dc(series float hi, series float lo, simple int p) =>
    if p <= 0
        runtime.error("Period must be > 0")
    var float[] hbuf = array.new_float(p, na)
    var float[] lbuf = array.new_float(p, na)
    var int[] hq = array.new_int()
    var int[] lq = array.new_int()
    int idx = bar_index % p
    array.set(hbuf, idx, hi)
    array.set(lbuf, idx, lo)
    while array.size(hq) > 0 and array.get(hq, 0) <= bar_index - p
        array.shift(hq)
    while array.size(hq) > 0 and array.get(hbuf, array.get(hq, -1) % p) <= hi
        array.pop(hq)
    array.push(hq, bar_index)
    while array.size(lq) > 0 and array.get(lq, 0) <= bar_index - p
        array.shift(lq)
    while array.size(lq) > 0 and array.get(lbuf, array.get(lq, -1) % p) >= lo
        array.pop(lq)
    array.push(lq, bar_index)
    float top = array.get(hbuf, array.get(hq, 0) % p)
    float bot = array.get(lbuf, array.get(lq, 0) % p)
    [math.avg(top, bot), top, bot]


// ---------- Main loop ----------

// Inputs
i_period = input.int(20, "Period", minval=1)
i_high = input.source(high, "High Source")
i_low = input.source(low, "Low Source")

// Calculation
[basis, upper, lower] = dc(i_high, i_low, i_period)

// Plot
plot(basis, "Basis", color.new(color.orange, 0), 2)
p1 = plot(upper, "Upper", color.new(color.blue, 50), 1)
p2 = plot(lower, "Lower", color.new(color.blue, 50), 1)
fill(p1, p2, title="Background", color=color.new(color.blue, 90))
