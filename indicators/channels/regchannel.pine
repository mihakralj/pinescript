// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Regression Channels (REGCHANNEL)", "REGCHANNEL", overlay=true)

//@function Calculates Regression Channels with parallel lines equidistant from a central linear regression line
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/channels/regchannel.md
//@param period {simple int} Lookback period for regression calculation. `period` > 1.
//@param source {series float} Source series for regression calculation (usually `close`).
//@param multiplier {simple float} Distance multiplier for channel bands. `multiplier` > 0.
//@returns {[series float, series float, series float]} A tuple containing the upper band, regression line, and lower band.
regchannel(simple int period, series float source=close, simple float multiplier=2.0) =>
    if period <= 1
        runtime.error("Period must be > 1")
    if multiplier <= 0
        runtime.error("Multiplier must be > 0")
    
    // Calculate linear regression
    sumX = 0.0, sumY = 0.0, sumXY = 0.0, sumX2 = 0.0
    for i = 0 to period - 1
        x = float(i)
        y = source[period - 1 - i]
        sumX := sumX + x
        sumY := sumY + y
        sumXY := sumXY + x * y
        sumX2 := sumX2 + x * x
    
    n = float(period)
    slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)
    intercept = (sumY - slope * sumX) / n
    
    // Current regression line value
    currentX = float(period - 1)
    regression = slope * currentX + intercept
    
    // Calculate standard deviation of residuals
    sumResiduals2 = 0.0
    for i = 0 to period - 1
        x = float(i)
        y = source[period - 1 - i]
        predicted = slope * x + intercept
        residual = y - predicted
        sumResiduals2 := sumResiduals2 + residual * residual
    
    stdDev = math.sqrt(sumResiduals2 / n)
    
    // Calculate channel bands
    upperBand = regression + multiplier * stdDev
    lowerBand = regression - multiplier * stdDev
    
    [upperBand, regression, lowerBand]

// ---------- Main loop ----------

// Inputs
i_period = input.int(20, "Period", minval=2)
i_source = input.source(close, "Source")
i_multiplier = input.float(2.0, "Standard Deviation Multiplier", minval=0.1, step=0.1)

// Calculation
[upperBand, midLine, lowerBand] = regchannel(i_period, i_source, i_multiplier)

// Plot
p1 = plot(upperBand, "Upper Band", color=color.yellow, linewidth=2)
p2 = plot(midLine, "Regression Line", color=color.yellow, linewidth=2)
p3 = plot(lowerBand, "Lower Band", color=color.yellow, linewidth=2)
fill(p1, p2, title="Upper Fill", color=color.red)
fill(p2, p3, title="Lower Fill", color=color.green)
