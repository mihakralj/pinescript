// The MIT License (MIT)
// © mihakralj
//@version=6
indicator("MESA Cycle Identifier", "MESA", overlay=true)

//@function Extracts dominant cycle using Ehlers' MESA algorithm
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/cycles/mesa.md
//@param source Series to calculate cycle from
//@param fastLimit Maximum rate of adaptation (0.5 typical)
//@param slowLimit Minimum rate of adaptation (0.05 typical)
//@returns [period, phase, mama, fama] array containing cycle period, phase, and MAMA/FAMA values
mesa(series float source, float fastLimit=0.5, float slowLimit=0.05) =>
    if fastLimit < slowLimit or fastLimit <= 0 or slowLimit < 0
        runtime.error("MESA: fastLimit must be > slowLimit > 0")
    var float mama_val = na, var float fama_val = na, var float period = 0.0, var float phase = 0.0
    var float smooth = na, var float dt = na, var float I1 = 0.0, var float Q1 = 0.0
    var float I2 = 0.0, var float Q2 = 0.0, var float Re = 0.0, var float Im = 0.0
    float TWOPI = 2.0 * math.pi, float c1 = 0.0962, float c2 = 0.5769
    float price = not na(source[3]) ? (4.0 * source + 3.0 * source[1] + 2.0 * source[2] + source[3]) / 10.0 : 
                  not na(source[2]) ? (4.0 * source + 3.0 * source[1] + 2.0 * source[2]) / 9.0 : 
                  not na(source[1]) ? (4.0 * source + 3.0 * source[1]) / 7.0 : source
    if na(mama_val)
        mama_val := price, fama_val := price, smooth := price
    else
        smooth := (4.0 * price + 3.0 * price[1] + 2.0 * price[2] + price[3]) / 10.0
        float padj = 0.075 * period + 0.54
        dt := (c1 * smooth + c2 * smooth[2] - c2 * smooth[4] - c1 * smooth[6]) * padj
        I1 := dt[3]
        Q1 := (c1 * dt + c2 * dt[2] - c2 * dt[4] - c1 * dt[6]) * padj
        float jI = (c1 * I1 + c2 * I1[2] - c2 * I1[4] - c1 * I1[6]) * padj
        float jQ = (c1 * Q1 + c2 * Q1[2] - c2 * Q1[4] - c1 * Q1[6]) * padj
        I2 := 0.2 * (I1 - jQ) + 0.8 * I2[1]
        Q2 := 0.2 * (Q1 + jI) + 0.8 * Q2[1]
        Re := 0.2 * (I2 * I2[1] + Q2 * Q2[1]) + 0.8 * Re[1]
        Im := 0.2 * (I2 * Q2[1] - Q2 * I2[1]) + 0.8 * Im[1]
        if Im != 0.0 and Re != 0.0
            period := TWOPI / math.atan(Im / Re)
        period := 0.2 * math.max(6.0, math.min(50.0, period)) + 0.8 * period[1]
        if I1 != 0.0
            phase := math.atan(Q1 / I1)
        float deltaPhase = phase[1] - phase
        if deltaPhase >= 1.0
            deltaPhase := 0.0
        if deltaPhase < 0.0
            deltaPhase += TWOPI
        float alpha = math.min(fastLimit, math.max(slowLimit, fastLimit / math.pow(deltaPhase / 0.5, 2)))
        float oneMinusAlpha = 1.0 - alpha
        mama_val := alpha * price + oneMinusAlpha * mama_val[1]
        fama_val := 0.5 * alpha * mama_val + (1.0 - 0.5 * alpha) * fama_val[1]
    [period, phase, mama_val, fama_val]

// Detect cycle highs and lows
detect_cycle_points(float phase) =>
    var float prev_phase = 0.0
    bool peak = false
    bool valley = false
    
    // Detect phase wrapping from high to low (~2π to ~0)
    peak := phase < math.pi/2 and prev_phase > 3*math.pi/2
    // Detect phase wrapping from low to high (~0 to ~2π)
    valley := phase > 3*math.pi/2 and prev_phase < math.pi/2
    
    prev_phase := phase
    [peak, valley]

// ---------- Main loop ----------

// Inputs
i_source = input.source(close, "Source")
i_fastLimit = input.float(0.5, "Fast Limit", minval=0.01, maxval=0.99, step=0.01)
i_slowLimit = input.float(0.05, "Slow Limit", minval=0.001, maxval=0.5, step=0.01)
i_showMA = input.bool(true, "Show Moving Averages")
i_showMarkers = input.bool(true, "Show Cycle Markers")
i_showPeriod = input.bool(true, "Show Dominant Period")

// Calculate MESA components
[period, phase, mama_value, fama_value] = mesa(i_source, i_fastLimit, i_slowLimit)
[cycle_peak, cycle_valley] = detect_cycle_points(phase)

// Plot moving averages
plot(i_showMA ? mama_value : na, "MAMA", color.new(color.red, 0), 2)
plot(i_showMA ? fama_value : na, "FAMA", color.new(color.blue, 0), 2)

// Plot cycle markers
plotshape(i_showMarkers and cycle_peak, "Cycle High", shape.triangledown, location.abovebar, color.new(color.red, 0), size=size.small)
plotshape(i_showMarkers and cycle_valley, "Cycle Low", shape.triangleup, location.belowbar, color.new(color.green, 0), size=size.small)

// Display dominant cycle period
var label period_label = na
if i_showPeriod
    label.delete(period_label)
    period_label := label.new(bar_index, high, str.tostring(math.round(period), "#.#") + " bars", 
                             xloc.bar_index, yloc.price, color.new(color.gray, 50), 
                             label.style_label_left, color.gray, size.small)
