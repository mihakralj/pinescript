// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Close-to-Close Volatility", "CCV", overlay=false)

//@function Calculates Close-to-Close Volatility using closing price returns
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/volatility/ccv.md
//@param length Period for volatility calculations
//@param method Smoothing method (1=SMA, 2=EMA, 3=WMA)
//@returns float Volatility value
//@optimized for performance and dirty data
ccv(simple int length, simple int method) =>
    if length <= 0
        runtime.error("Length must be greater than 0")
    if method < 1 or method > 3
        runtime.error("Method must be 1 (SMA), 2 (EMA), or 3 (WMA)")
    var int p = math.max(1, length)
    var int head = 0
    var int count = 0
    var array<float> buffer = array.new_float(p, na)
    var float sum = 0.0
    var float wsum = 0.0
    float priceReturn = math.log(close/close[1])
    float oldest = array.get(buffer, head)
    if not na(oldest)
        sum -= oldest
        count -= 1
    sum += priceReturn
    count += 1
    array.set(buffer, head, priceReturn)
    head := (head + 1) % p
    float mean = nz(sum / count)
    float squaredSum = 0.0
    for i = 0 to length - 1
        float val = array.get(buffer, (head - i - 1 + p) % p)
        if not na(val)
            squaredSum += math.pow(val - mean, 2)
    float annualizedStdDev = math.sqrt(squaredSum/count) * math.sqrt(252)
    var float EPSILON = 1e-10
    var float raw_ema = 0.0
    var float e = 1.0
    float result = na
    if method == 1  // SMA
        result := annualizedStdDev
    else if method == 2  // EMA
        float alpha = 1.0/float(length)
        raw_ema := (raw_ema * (length - 1) + annualizedStdDev) / length
        e := (1 - alpha) * e
        result := e > EPSILON ? raw_ema / (1.0 - e) : raw_ema
    else  // WMA
        float sumWeight = length * (length + 1) / 2
        float weightedSum = 0.0
        float weight = length
        for i = 0 to length - 1
            weightedSum += annualizedStdDev * weight
            weight -= 1.0
        result := weightedSum / sumWeight
    result

// ---------- Main loop ----------

// Inputs
i_length = input.int(20, "Length", minval=1, maxval=500, tooltip="Number of bars for volatility calculation")
i_method = input.int(1, "Method", minval=1, maxval=3, tooltip="1=SMA, 2=EMA, 3=WMA")

// Calculation
ccvValue = ccv(i_length, i_method)

// Plot
plot(ccvValue, "CCV", color.new(color.yellow, 0), 2)
