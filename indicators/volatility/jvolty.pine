// The MIT License (MIT)
// Â© mihakralj
//@version=6
indicator("Jurik Volatility", "JVOLTY", overlay=false)

//@function Calculates JVOLTY using adaptive techniques to adjust to market volatility
//@doc https://github.com/mihakralj/pinescript/blob/main/indicators/volatility/jvolty.md
//@param source Series to calculate Jvolty from
//@param period Number of bars used in the calculation
//@returns JVOLTY volatility
jvolty(series float source, simple int period) =>
    var simple float LEN1 = math.max((math.log(math.sqrt(0.5*(period-1))) / math.log(2.0)) + 2.0, 0)
    var simple float POW1 = math.max(LEN1 - 2.0, 0.5)
    var simple float LEN2 = math.sqrt(0.5*(period-1))*LEN1
    var simple float AVG_VOLTY_ALPHA = 2.0 / (math.max(4.0 * period, 65) + 1.0)
    var simple float DIV = 1.0/(10.0 + 10.0*(math.min(math.max(period-10,0),100))/100.0)
    var float upperBand = source
    var float lowerBand = source
    var float vSum = 0.0
    var float avgVolty = 0.0
    float del1 = source - upperBand
    float del2 = source - lowerBand
    float volty = math.max(math.abs(del1), math.abs(del2))
    vSum := vSum + (volty - nz(volty[10], 0)) * DIV
    avgVolty := na(avgVolty) ? vSum : avgVolty + AVG_VOLTY_ALPHA * (vSum - avgVolty)
    float rvolty = math.min(math.max(avgVolty > 0 ? volty / avgVolty : 1.0, 1.0), math.pow(LEN1, 1.0 / POW1))
    float Kv = math.pow(LEN2/(LEN2+1), math.sqrt(math.pow(rvolty, POW1)))
    upperBand := del1 > 0 ? source : source - Kv * del1
    lowerBand := del2 < 0 ? source : source - Kv * del2
    rvolty


// ---------- Main loop ----------

// Inputs
i_period = input.int(10, "Period", minval=1, tooltip="Number of bars used in the calculation")
i_source = input.source(close, "Source")

// Calculation
jvolty= jvolty(i_source, i_period)

// Plot
plot(jvolty, "JVolty", color.new(color.yellow, 0), 2)
